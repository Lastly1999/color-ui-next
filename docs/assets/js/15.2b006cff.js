(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{373:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[s("img",{attrs:{src:"/hero.jpg"}})]),t._v(" "),s("font",{attrs:{color:"#5e6d82",size:"3"}},[t._v("\n目前做的比较成熟稳定的UI库有elementUI，ant-design等，为什么我还要自己再去花那么多时间和精力去造轮子？\n我觉得会用轮子和造轮子完全是两码事，碰到业务上的需求，现在的UI库无法满足你时，你可以随时对你的轮子进行拓展，持续封装业务中高复用的代码，深化自己造轮子的能力，绝对会让自己开发效率事半功倍。\n")]),t._v(" "),s("h3",{attrs:{id:"项目特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目特点"}},[t._v("#")]),t._v(" 项目特点")]),t._v(" "),s("ul",[s("li",[t._v("🎨 使用Uniapp作为框架，color-ui的样式集合作为框架的样式渲染，保证组件库的优雅和一致性。")]),t._v(" "),s("li",[t._v("🌍 框架内大量使用了基于vue的包括单向数据流，双向数据流，事件订阅和双向绑定以及动态class等技术。")]),t._v(" "),s("li",[t._v("基于color-ui实现的全部组件，在基础上又进行了功能增强，已应对开发的需求和组件封装的深度。")])]),t._v(" "),s("h3",{attrs:{id:"tip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tip"}},[t._v("#")]),t._v(" Tip")]),t._v(" "),s("p",[t._v("🔗 目前组件仍在持续更新中。本组件库仅供学习交流，请勿在生产环境中使用。 欢迎讨论交流，如果你觉得还不错，请 Star (opens new window)一下哦~~~")])],1)}),[],!1,null,null,null);a.default=r.exports}}]);